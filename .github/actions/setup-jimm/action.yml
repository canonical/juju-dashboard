name: Set up JIMM
description: Set up JIMM with provided configuration.
inputs:
  admin-username:
    required: false
    description: The username to use when logging in as the admin user.
    default: admin
  admin-password:
    required: false
    description: The password to use when logging in as the admin user.
    default: test
  jimm-channel:
    description: The JIMM charm channel to use.
    required: false
    default: 3/edge
  juju-channel:
    description: Channel of Juju to use.
    required: false
    default: 3/stable
outputs:
  jimm-controller-name:
    description: Name of the JIMM workloads controller
    value: ${{ steps.jimm-controller.outputs.name }}
  workloads-controller-name:
    description: Name of the JIMM workloads controller
    value: ${{ steps.workloads-controller.outputs.public }}

runs:
  using: composite
  steps:
    - name: Disable IPv6
      shell: bash
      run: |
        echo "net.ipv6.conf.all.disable_ipv6=1" | sudo tee -a /etc/sysctl.conf
        echo "net.ipv6.conf.default.disable_ipv6=1" | sudo tee -a /etc/sysctl.conf
        echo "net.ipv6.conf.lo.disable_ipv6=1" | sudo tee -a /etc/sysctl.conf
        sudo sysctl -p
    - name: Setup operator environment
      uses: charmed-kubernetes/actions-operator@main
      with:
        channel: 1.32-strict/stable
        juju-channel: ${{ inputs.juju-channel }}
        provider: microk8s
        microk8s-group: snap_microk8s
        microk8s-addons: "hostpath-storage dns ingress host-access metallb:10.64.140.43-10.64.140.49"
    - name: Save JIMM controller name
      id: jimm-controller
      run: echo "name=$CONTROLLER_NAME" >> "$GITHUB_OUTPUT"
      shell: bash
    - name: Set up deps
      shell: bash
      run: |
        sudo snap install yq vault jaas
    - name: Setup Go
      uses: actions/setup-go@v5
    - name: Set up IAM
      shell: bash
      run: |
        juju add-model iam
        juju deploy identity-platform --trust --channel latest/edge
    - name: Wait for IAM
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 1
        max_attempts: 5 # Retry the wait-for with a short timeout in case it gets stuck and times out. If it fails after multiple tries it's probably a real error.
        command: |
          # Wait for everything to be ready except kratos-external-idp-integrator
          # which will remain as blocked as we're not using an external identity provider.
          juju wait-for model iam --timeout=1m --query='forEach(applications, app => (app.name == "kratos-external-idp-integrator" && app.status=="blocked") || (app.name != "kratos-external-idp-integrator" && app.status=="active"))'
    - name: Create IAM offers for cross-model relations
      shell: bash
      run: |
        juju offer hydra:oauth
        juju offer self-signed-certificates:send-ca-cert
    - name: Turn off MFA
      shell: bash
      run: juju config kratos enforce_mfa=False
    - name: Wait for Kratos
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 1
        max_attempts: 5 # Retry the wait-for with a short timeout in case it gets stuck and times out. If it fails after multiple tries it's probably a real error.
        command: juju wait-for unit kratos/0 --timeout=1m
    - name: Create admin user
      shell: bash
      run: |
        IDENTITY_ID=$(juju run --wait=2m --format=json kratos/0 create-admin-account email='${{ inputs.admin-username }}@example.com' password='${{ inputs.admin-password }}' username='${{ inputs.admin-username }}' | yq .kratos/0.results.identity-id)
        SECRET_ID=$(juju add-secret password-secret password=test)
        juju grant-secret password-secret kratos
        juju run --wait=2m kratos/0 reset-password identity-id=$IDENTITY_ID password-secret-id=$SECRET_ID
    - name: Add JIMM model and apps
      shell: bash
      run: |
        juju add-model jimm
        juju deploy juju-jimm-k8s --channel=${{ inputs.jimm-channel }} jimm
        juju deploy openfga-k8s --channel=edge openfga
        juju deploy postgresql-k8s --channel=14/stable postgresql
        juju deploy vault-k8s --channel=1.15/beta vault
        juju deploy nginx-ingress-integrator --channel=latest/stable --trust ingress
        juju trust postgresql --scope=cluster
    - name: Wait for Postgres
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 1
        max_attempts: 5 # Retry the wait-for with a short timeout in case it gets stuck and times out. If it fails after multiple tries it's probably a real error.
        command: juju wait-for unit postgresql/0 --timeout=1m # Wait for postgres to prevent issues when relating to openfga: https://github.com/canonical/openfga-operator/issues/25.
    - name: Add JIMM relations
      shell: bash
      run: |
        juju relate jimm:nginx-route ingress
        juju relate jimm:openfga openfga
        juju relate jimm:database postgresql
        juju relate jimm:vault vault
        juju relate openfga:database postgresql
    - name: Wait for openfga
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 1
        max_attempts: 5 # Retry the wait-for with a short timeout in case it gets stuck and times out. If it fails after multiple tries it's probably a real error.
        command: |
          STATUS=$(juju status --format json | yq .applications.openfga.application-status.current)
          if [ "$STATUS" == "error" ]; then
            # Sometimes the openfga unit will get into an error state, so resolve and try again.
            juju resolved openfga/0
          fi
          juju wait-for unit openfga/0 --timeout=1m
    - name: Add JIMM relations and certs
      shell: bash
      run: |
        juju relate jimm admin/iam.hydra
        juju relate jimm admin/iam.self-signed-certificates
        juju deploy self-signed-certificates jimm-cert
        juju relate ingress:certificates jimm-cert:certificates
    - name: Wait for vault
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 1
        max_attempts: 5 # Retry the wait-for with a short timeout in case it gets stuck and times out. If it fails after multiple tries it's probably a real error.
        command: juju wait-for application vault --timeout=1m --query='name=="vault" && status=="blocked"'
    - name: Set up Vault
      shell: bash
      run: |
        export VAULT_ADDR=https://$(juju status vault/leader --format=yaml | yq '.applications.vault.address'):8200; echo "Vault address =" "$VAULT_ADDR"
        cert_juju_secret_id=$(juju secrets --format=yaml | yq 'to_entries | .[] | select(.value.label == "self-signed-vault-ca-certificate") | .key'); echo "Vault ca-cert secret ID =" "$cert_juju_secret_id"
        juju show-secret ${cert_juju_secret_id} --reveal --format=yaml | yq '.[].content.certificate' > vault.pem && echo "saved certificate contents to vault.pem"
        export VAULT_CAPATH=$(pwd)/vault.pem; echo "Setting VAULT_CAPATH from" "$VAULT_CAPATH"
        # Wait until the cert file exists and isn't empty:
        timeout 30s bash -c "until [ -s $VAULT_CAPATH ]; do sleep 1; done"
        key_init=$(vault operator init -key-shares=1 -key-threshold=1); echo "$key_init"
        export VAULT_TOKEN=$(echo "$key_init" | sed -n -e 's/.*Root Token: //p'); echo "RootToken = $VAULT_TOKEN"
        export UNSEAL_KEY=$(echo "$key_init" | sed -n -e 's/.*Unseal Key 1: //p'); echo "UnsealKey = $UNSEAL_KEY"
        vault operator unseal "$UNSEAL_KEY"
        vault_secret_id=$(juju add-secret vault-token token="$VAULT_TOKEN")
        juju grant-secret vault-token vault
        juju run --wait=2m vault/leader authorize-charm secret-id="$vault_secret_id"
        juju remove-secret "vault-token"
    - name: Configure JIMM
      shell: bash
      run: |
        # Give the user admin permissions so that they can add the workload controller.
        juju config jimm controller-admins="${{ inputs.admin-username }}@example.com"
        juju config jimm uuid=3f4d142b-732e-4e99-80e7-5899b7e67e59
        juju config jimm dns-name=test-jimm.local
        KEYS=$(go run github.com/go-macaroon-bakery/macaroon-bakery/cmd/bakery-keygen/v3@latest)
        juju config jimm public-key=$(echo $KEYS | yq .public)
        juju config jimm private-key=$(echo $KEYS | yq .private)
    - name: Wait for ingress
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 1
        max_attempts: 5 # Retry the wait-for with a short timeout in case it gets stuck and times out. If it fails after multiple tries it's probably a real error.
        command: |
          STATUS=$(juju status --format json | yq .applications.ingress.application-status.current)
          if [ "$STATUS" == "error" ]; then
            # Sometimes the ingress unit will get into an error state, so resolve and try again.
            juju resolved ingress/0
          fi
          juju wait-for unit ingress/0 --timeout=1m
    - name: Set up ingress hostname and certs
      shell: bash
      run: |
        # Point the test-jimm.local hostname to the ingress address.
        echo "$(juju status ingress/0 --format=json | yq '.applications.ingress.units.ingress/0.workload-status.message | sub("Ingress IP\\(s\\): ", "")') test-jimm.local" | sudo tee -a /etc/hosts
        juju run --wait=2m jimm-cert/0 get-ca-certificate --quiet | yq .ca-certificate | sudo tee /usr/local/share/ca-certificates/jimm-test.crt
        sudo update-ca-certificates --fresh
    - name: Wait for JIMM
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 1
        max_attempts: 5 # Retry the wait-for with a short timeout in case it gets stuck and times out. If it fails after multiple tries it's probably a real error.
        command: juju wait-for unit jimm/0 --timeout=1m # Wait for JIMM to be ready if it's still making config changes.
    - name: Bootstrap workloads controller
      id: workloads-controller
      shell: bash
      run: |
        WORKLOADS_NAME=workload-microk8s
        sg snap_microk8s -c "juju bootstrap microk8s $WORKLOADS_NAME --config login-token-refresh-url=http://jimm-endpoints.jimm.svc.cluster.local:8080/.well-known/jwks.json"
        echo "name=$WORKLOADS_NAME" >> $GITHUB_OUTPUT
        # Set the name that the workloads controller will be registered as.
        echo "public=jimm-k8s" >> $GITHUB_OUTPUT
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: "yarn"
    - name: Set up Playwright
      uses: ./.github/actions/run-playwright
      with:
        run: false
    - name: Log in to JIMM with Juju CLI
      shell: bash
      run: npx tsx .github/actions/setup-jimm/cli-login.ts
      env:
        CONTROLLER_NAME: ${{ steps.workloads-controller.outputs.public }}
        USERNAME: ${{ inputs.admin-username }}@example.com
        PASSWORD: ${{ inputs.admin-password }}
    - name: Register workload controller with JIMM
      shell: bash
      run: |
        juju jaas register-controller '${{ steps.workloads-controller.outputs.name }}' --local --tls-hostname juju-apiserver
        juju update-credentials microk8s --controller ${{ steps.workloads-controller.outputs.public }}
    - name: Wait for JIMM
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 1
        max_attempts: 5 # Retry the wait-for with a short timeout in case it gets stuck and times out. If it fails after multiple tries it's probably a real error.
        command: |
          juju switch '${{ steps.jimm-controller.outputs.name }}:jimm'
          # Wait for JIMM to be ready if it's still making config changes.
          juju wait-for unit jimm/0 --timeout=1m
    - name: Restart JIMM
      shell: bash
      run: sudo microk8s kubectl delete pod jimm-0 -n jimm # Fix ListModels issue:
    - name: Wait for JIMM pod to be recreated
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 1
        max_attempts: 5 # Retry the wait-for with a short timeout in case it gets stuck and times out. If it fails after multiple tries it's probably a real error.
        continue_on_error: true # Sometimes the error persists after a retry but it seems to work anyway.
        command: |
          juju switch '${{ steps.jimm-controller.outputs.name }}:jimm'
          STATUS=$(juju status --format json | yq .applications.jimm.application-status.current)
          if [ "$STATUS" == "error" ]; then
            # Sometimes the jimm unit will get into an error state, so resolve and try again.
            juju resolved jimm/0
          fi
          juju wait-for application jimm --timeout=1m --query='name=="jimm" && (status=="active" || status=="error")'
