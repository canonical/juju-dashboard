name: Set up Juju Dashboard k8s charm
description: Set up the Juju Dashboard k8s charm using the supplied versions.
inputs:
  controller-app:
    required: false
    description: The Juju controller application.
    default: controller
  controller-model:
    required: false
    description: The model containing the Juju controller.
    default: controller
  dashboard-ref:
    description: Git reference to build dashboard from. Cannot be used with `dashboard-resource` or `charm-channel`.
    required: false
  dashboard-resource:
    description: Charm resource revision to use when building charm. Cannot be used with `dashboard-ref` or `charm-channel`.
    required: false
  charm-channel:
    description: If set and this is not called from a PR this will run the e2e tests against a published charm. All other options will be ignored.
    required: false
    type: choice
    options:
      - latest/stable
      - latest/beta
      - latest/edge

runs:
  using: "composite"
  steps:
    - name: Set build type
      run: |
        if [ -n "${{ inputs.charm-channel }}" ]; then
          # Use the provided charm version.
          echo 'build_type=charm-release' >> "$GITHUB_ENV"
        elif [ -n "${{ inputs.dashboard-resource }}" ]; then
          # Use the provided dashboard image when building the charm.
          echo 'build_type=dashboard-resource' >> "$GITHUB_ENV"
        else
          # Build dashboard from source.
          echo 'build_type=source' >> "$GITHUB_ENV"
        fi
      shell: bash
    - name: Set up Juju Dashboard release
      if: ${{ env.build_type == 'source' }}
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.dashboard-ref }}
        path: juju-dashboard-release
    - name: Get the image and build the charm
      id: dashboard-image
      if: ${{ env.build_type != 'charm-release' }}
      shell: bash
      run: |
        "${{ github.workspace }}/charms/k8s-charm/build.sh" \
          "${{ env.build_type }}" \
          "${{ inputs.dashboard-resource }}" \
          >> "$GITHUB_OUTPUT"
    - name: Import dashboard image to microK8s
      if: ${{ env.build_type == 'source' }}
      shell: bash
      run: docker image save '${{ steps.dashboard-image.outputs.id }}' | sudo microk8s ctr image import -
    - name: Switch to controller
      run: juju switch '${{ inputs.controller-model }}'
      shell: bash
    - name: Deploy charm from channel
      if: ${{ env.build_type == 'charm-release' }}
      run: juju deploy juju-dashboard-k8s dashboard --channel '${{ inputs.charm-channel }}'
      shell: bash
    - name: Deploy built charm
      if: ${{ env.build_type != 'charm-release' }}
      run: juju deploy ${{ github.workspace }}/charms/k8s-charm/juju-dashboard*.charm dashboard --resource 'dashboard-image=${{ steps.dashboard-image.outputs.id }}'
      shell: bash
    - name: Integrate charm
      run: juju integrate '${{ inputs.controller-app }}' dashboard
      shell: bash
    - name: Wait for charm to be ready
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 1
        max_attempts: 5 # Retry the wait-for with a short timeout in case it gets stuck and times out. If it fails after multiple tries it's probably a real error.
        command: |
          STATUS=$(juju status --format json | yq .applications.dashboard.application-status.current)
          if [ "$STATUS" == "error" ]; then
            # Sometimes the dashboard unit will get into an error state, so resolve and try again.
            juju resolved dashboard/0
          fi
          juju wait-for application dashboard --timeout=1m
    - name: Disable analytics
      run: juju config dashboard analytics-enabled=false
      shell: bash
    - name: Clean up
      run: |
        # Delete build files to save space. Pass `|| true` so that an error is not thrown if the directories don't exist.
        rm -rf '${{ github.workspace }}/juju-dashboard-release' || true
      shell: bash
